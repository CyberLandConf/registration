service: jugda-registration

frameworkVersion: ">=1.2.0 <2.0.0"

provider:
  name: aws
  runtime: java8
  stage: prod
  region: eu-central-1
  memorySize: 2048
  timeout: 10
  deploymentBucket: dasniko.serverless.deployments.${self:provider.region}
  logRetentionInDays: 30
  environment:
    DYNAMODB_TABLE: ${self:service}
    SES_REGION: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: "arn:aws:ses:${self:provider.environment.SES_REGION}:*:identity/jug-da.de"
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"

package:
  artifact: target/jugda-registration.jar

functions:
  form:
    handler: de.jugda.registration.RegistrationHandler
    environment:
      SLACK_OAUTH_ACCESS_TOKEN: ${s3:${self:provider.deploymentBucket}/jugda/slack_access_token}
      SLACK_CHANNEL_GENERAL: ${s3:${self:provider.deploymentBucket}/jugda/slack_channel_general}
    events:
      - http:
          path: registration
          method: get
      - http:
          path: registration
          method: post
  list:
    handler: de.jugda.registration.ListHandler
    events:
      - http:
          path: list
          method: get
          cors: true
          authorizer:
            name: basicAuthorizr
            type: token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
  delete:
    handler: de.jugda.registration.DeleteHandler
    events:
      - http:
          path: delete
          method: get
      - http:
          path: delete
          method: post
      - http:
          path: delete
          method: delete
  basicAuthorizr:
    handler: de.jugda.registration.auth.BasicAuthHandler
    environment:
      REGISTRATION_SECRET: ${s3:${self:provider.deploymentBucket}/jugda/registration_secret}

resources:
  Resources:
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 2
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        SSESpecification:
          SSEEnabled: true
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.WWW-Authenticate: "'Basic'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: ApiGatewayRestApi
        StatusCode: 401
