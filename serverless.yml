service: jugda-registration

provider:
  name: aws
  runtime: provided
  stage: prod
  region: eu-central-1
  endpointType: REGIONAL
  apiGateway:
    shouldStartNameWithService: "true"
  memorySize: 512
  timeout: 30
  deploymentBucket: dasniko.serverless.deployments.${self:provider.region}
  logRetentionInDays: 30
  environment:
    DYNAMODB_TABLE: ${self:service}
    DISABLE_SIGNAL_HANDLERS: 'true'
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: "arn:aws:s3:::jugda/*"
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: "arn:aws:ses:${self:provider.region}:*:identity/jug-da.de"

custom: ${ssm:/aws/reference/secretsmanager/jugda-registration~true}

package:
  individually: true

functions:
  admin:
    handler: not.used.in.provided.runtime
    events:
      - http:
          path: /admin/{proxy+}
          method: any
          authorizer:
            name: basicAuthorizer
            type: token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 300
    package:
      artifact: target/function.zip
  public:
    handler: not.used.in.provided.runtime
    environment:
      SLACK_OAUTH_ACCESS_TOKEN: ${self:custom.slack.access_token}
      SLACK_CHANNEL_GENERAL: ${self:custom.slack.channel_general}
    events:
      - http:
          path: /{proxy+}
          method: any
    package:
      artifact: target/function.zip
  basicAuthorizer:
    handler: js/basicAuthorizr.handler
    runtime: nodejs12.x
    memorySize: 128
    timeout: 3
    environment:
      REGISTRATION_SECRET: ${self:custom.registration.secret}
    package:
      include:
        - js/basicAuthorizr.js
      exclude:
        - "*.*"
        - "*/**"

resources:
  Resources:
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: eventId
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 2
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        SSESpecification:
          SSEEnabled: true
        GlobalSecondaryIndexes:
          -
            IndexName: event-email-index
            KeySchema:
              -
                AttributeName: eventId
                KeyType: HASH
              -
                AttributeName: email
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 2
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.WWW-Authenticate: "'Basic'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: ApiGatewayRestApi
        StatusCode: 401
