package de.jugda.registration.model;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import lombok.Data;

import java.util.Date;
import java.util.Map;

/**
 * @author Niko KÃ¶bler, http://www.n-k.de, @dasniko
 */
@Data
@DynamoDBTable(tableName = "jugda-registration")
public class Registration {
    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    @DynamoDBAttribute
    private String id;
    @DynamoDBAttribute
    private String eventId;
    @DynamoDBAttribute
    private String name;
    @DynamoDBAttribute
    private String email;
    @DynamoDBAttribute
    private String twitter;
    @DynamoDBAttribute
    private boolean pub;
    @DynamoDBAttribute
    @DynamoDBAutoGeneratedTimestamp
    private Date created;

    public static Registration of(Map<String, Object> model) {
        Registration registration = new Registration();
        registration.setEventId(model.get(RequestParam.EVENT_ID).toString());
        registration.setName(model.get(RequestParam.NAME).toString().trim());
        registration.setEmail(model.get(RequestParam.EMAIL).toString().trim().toLowerCase());
        registration.setTwitter(model.getOrDefault(RequestParam.TWITTER, "").toString().trim().toLowerCase());
        registration.setPub(model.getOrDefault(RequestParam.PUB, "off").toString().equalsIgnoreCase("on"));
        return registration;
    }
}
