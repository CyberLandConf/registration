package de.jugda.registration.model;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.util.StringUtils;
import lombok.Data;

import java.time.LocalDate;
import java.time.ZoneOffset;
import java.util.Date;

/**
 * @author Niko KÃ¶bler, http://www.n-k.de, @dasniko
 */
@Data
@DynamoDBTable(tableName = "jugda-registration")
public class Registration {
    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    @DynamoDBAttribute
    private String id;
    @DynamoDBAttribute
    private String eventId;
    @DynamoDBAttribute
    private String name;
    @DynamoDBAttribute
    private String email;
    @DynamoDBAttribute
    private boolean pub;
    @DynamoDBAttribute
    private boolean waitlist;
    @DynamoDBAttribute
    private boolean privacy;
    @DynamoDBAttribute
    @DynamoDBAutoGeneratedTimestamp
    private Date created;
    @DynamoDBAttribute
    private Long ttl;

    public static Registration of(RegistrationForm form) {
        Registration registration = new Registration();
        registration.setEventId(form.getEventId());
        registration.setName(form.getName().trim());
        registration.setEmail(form.getEmail().trim().toLowerCase());
        registration.setPrivacy(onOrOff(form.getPrivacy()));
        registration.setPub(onOrOff(form.getPub()));
        registration.setWaitlist(form.isWaitlist());
        registration.setTtl(LocalDate.parse(form.getEventId()).plusWeeks(1).atStartOfDay().toEpochSecond(ZoneOffset.UTC));
        return registration;
    }

    private static boolean onOrOff(String s) {
        return (StringUtils.isNullOrEmpty(s) ? "off" : s).equalsIgnoreCase("on");
    }
}
